{"name":"Importation de PNJ","permission":{"default":0,"1qImqL9kPxfUOSjY":3},"type":"script","flags":{"core":{"sourceId":"Macro.YCvOsXMPWHe5wDWR"}},"scope":"global","command":"/**\n * To use this macro, paste monster data from a pdf, for the core book:\n * including the name of the monster, to the end of the \"Tactics\" section\n * \n * For the monster codex, copy from Manners to end of tactics, and paste to notepad. At the beginning of the text, add the name of the npc/monster, then paste into the textfield\n * \n */\n\n(()=>{\n    let dialog_content = `  \n    <div class=\"form-group\">\n      <label for=\"npctext\">Pase NPC data</label>\n      <input name=\"npctext\" type=\"text\">\n    </div>`;\n  \n    let x = new Dialog({\n      content : dialog_content,\n      buttons : \n      {\n        Ok : { label : `Ok`, callback : async (html)=> await extractAllData(html.find('[name=npctext]')[0].value.replace(/[\\r|\\n]/g, \"\"))},\n        Cancel : {label : `Cancel`}\n      }\n    });\n  \n    x.options.width = 200;\n    x.position.width = 200;\n  \n    x.render(true);\n  \n})();\n\nasync function extractSpecialItems(actorItems, abilitilist, abilityPattern)\n{\n    let message = \"\";\n    if( abilitilist !== null) {\n        await abilitilist.forEach(async element => { \n            let tmpdata = element.trim().match(abilityPattern);\n            if( tmpdata != null && tmpdata.length == 3)\n            {\n                let higherLevel = false;\n                let ability = game.items.filter(element => element.name.toLowerCase() === tmpdata[1].trim().toLowerCase());\n                if(ability.length > 0 )\n                {\n                    ability = duplicate(ability[0].data);\n                    let abilityAction = \"\";\n\n                    // Master ability\n                    if(tmpdata[2] === \"maître\" || tmpdata[2] === \"Maître\" || tmpdata[2] === \"III\") {                    \n                        higherLevel = true;\n                        setProperty(ability, \"data.master.isActive\",true);                                            \n                    }                \n                    abilityAction = getProperty(ability, \"data.master.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.master.action\", \"A\");\n                    }\n                    // Adept ability\n                    if(tmpdata[2] === \"adepte\" || tmpdata[2] === \"Adepte\" || tmpdata[2] === \"II\" || higherLevel) {                \n                        higherLevel = true;\n                        setProperty(ability, \"data.adept.isActive\",true);                        \n\n                    }    \n                    abilityAction = getProperty(ability, \"data.adept.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.adept.action\", \"A\");\n                    }\n                    // Novice ability\n                    if(tmpdata[2] === \"novice\" || tmpdata[2] === \"I\" || higherLevel) {                              \n                        setProperty(ability, \"data.novice.isActive\",true);                        \n                    }\n                    abilityAction = getProperty(ability, \"data.novice.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.novice.action\", \"A\");\n                    }\n                    // console.log(\"Final ability \"+JSON.stringify(ability));\n                    actorItems.push(ability);\n                }\n                else \n                {\n                    message += `${element} not added - add manually </br>`;\n                }\n            }\n            else \n            {\n                console.log(\"element[\"+element+\"] not found - add manually\");           \n            }\n        });\n\n    }    \n    return message;    \n}\n\nasync function extractAllData(npcData)\n{\n    let additionalInfo = \"\";\n\n    let extractData = function(inputData, inputPattern) {\n        let tmp = inputData.match(inputPattern);\n        if( tmp != null && tmp.length == 2) {\n            // successful match\n            return tmp[1];\n        }\n        return \"nomatch\";\n    };\n    let expectedData = npcData.replaceAll(\"- \",\"\");\n\n    let namePattern = /^(.+?) [Race|Manières]+/;\n    let newValues = {\n        name: extractData(expectedData,namePattern),\n        type: \"monster\",\n        folder: null,\n        sort: 12000,\n        data: {},\n        token: {},\n        items: [],\n        flags: {}        \n    }\n\n    let mannerPattern = /Manières (.*) Race /;\n    setProperty(newValues, \"data.bio.manner\",extractData(expectedData,mannerPattern));\n\n    let racePattern = /Race (.*) Résistance/;\n    setProperty(newValues, \"data.bio.race\",extractData(expectedData,racePattern));\n\n    let attributePattern = /Précision ([0-9]+)/;\n    // console.log(\"Accurate[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.accurate.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Astuce ([0-9]+)/;\n    // console.log(\"Cunning[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.cunning.value\", parseInt(extractData(expectedData,attributePattern)));    \n    attributePattern = /Discrétion ([0-9]+)/;\n    // console.log(\"Discreet[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.discreet.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Persuasion ([0-9]+)/;\n    // console.log(\"Persuasive[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.persuasive.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Agilité ([0-9]+).+\\)/;\n    // console.log(\"Quick[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.quick.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Volonté ([0-9]+)/;\n    // console.log(\"Resolute[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.resolute.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Force ([0-9]+)/;\n    // console.log(\"Strong[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.strong.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Vigilance ([0-9]+)/;\n    // console.log(\"Vigilant[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.vigilant.value\", parseInt(extractData(expectedData,attributePattern)));\n\n    let shadowPattern = /Ombre (.*) \\(/;\n    // console.log(\"Shadow[\"+extractData(expectedData,shadowPattern)+\"]\");    \n    setProperty(newValues, \"data.bio.shadow\", extractData(expectedData,shadowPattern));\n    \n    // If nomatch == thouroughly corrupt\n    let corruptionPattern = /\\(corruption: ([0-9]+).?\\)/;\n    // console.log(\"Permanent Corruption[\"+extractData(expectedData,corruptionPattern)+\"]\");   \n    let corr = extractData(expectedData,corruptionPattern);\n    if( corr !== null && corr !== \"nomatch\" ) {\n        setProperty(newValues, \"data.health.corruption.permanent\", parseInt(extractData(expectedData,corruptionPattern))); \n    }\n    \n    let tacticsPattern = / Tactique : (.*)/;\n    // console.log(\"Tactics[\"+extractData(expectedData,tacticsPattern)+\"]\");\n    setProperty(newValues, \"data.bio.tactics\", extractData(expectedData,tacticsPattern));\n\n    let actor = await Actor.create(newValues);\n\n    let abilitiesPattern = /Talents (.*) Armes /;\n    let singleAbilityPattern = /([^,^\\)]+?)\\),?/g;\n    let abilityPattern = /([^\\(]+)\\((.+)\\)/;\n    let allAbilities = extractData(expectedData,abilitiesPattern);\n    let abilitilist = allAbilities.match(singleAbilityPattern);\n    let actorItems = [];\n    // Normal abilities\n    // Medicus (master), \n    additionalInfo += await extractSpecialItems(actorItems, abilitilist, abilityPattern);\n    // Mystical Power\n    let mysicalPowerPattern = /Pouvoir mystique \\(([^,]+), (.*)\\)/\n    // Mystical Power (Bend Will, master)\n    additionalInfo += await extractSpecialItems(actorItems, abilitilist, mysicalPowerPattern);\n\n    let traitsPattern = /Traits (.+) Précision [0-9]/;\n    // console.log(\"Traits[\"+extractData(expectedData,traitsPattern)+\"]\");\n    let traitstlist = extractData(expectedData,traitsPattern).match(singleAbilityPattern);\n    console.log(\"traitslist =\"+JSON.stringify(traitstlist));\n    additionalInfo += await extractSpecialItems(actorItems, traitstlist, abilityPattern);\n\n    let updateObj = await actor.createOwnedItem(actorItems);\n    // console.log(\"updateObj \"+JSON.stringify(updateObj));\n    let message = `Created ${actor.name}</br>${additionalInfo}`;\n    ChatMessage.create({\n        speaker: ChatMessage.getSpeaker({alias: \"NPC Importer Macro\"}),\n        content: message\n    });\n\n}","author":"1qImqL9kPxfUOSjY","img":"icons/svg/angel.svg","actorIds":[],"_id":"fkNnIAi1K9fIYqrn"}
